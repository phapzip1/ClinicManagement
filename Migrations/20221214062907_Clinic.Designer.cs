// <auto-generated />
using System;
using ClinicManagement.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ClinicManagement.Migrations
{
    [DbContext(typeof(ClinicDbContext))]
    [Migration("20221214062907_Clinic")]
    partial class Clinic
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("ClinicManagement.DTOs.BillDTO", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<uint>("MedicalCost")
                        .HasColumnType("int unsigned");

                    b.Property<byte[]>("MedicalNoteId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<uint>("MedicineCost")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.HasIndex("MedicalNoteId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("ClinicManagement.DTOs.IllnessDTO", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Symptom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Illness");
                });

            modelBuilder.Entity("ClinicManagement.DTOs.ImportDTO", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime>("CreateIn")
                        .HasColumnType("datetime");

                    b.Property<uint>("Price")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.ToTable("Imports");
                });

            modelBuilder.Entity("ClinicManagement.DTOs.ImportDetailDTO", b =>
                {
                    b.Property<byte[]>("ImportId")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("MedicineId")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("ImportId", "MedicineId");

                    b.ToTable("ImportDetail");
                });

            modelBuilder.Entity("ClinicManagement.DTOs.MedicalNoteDTO", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime>("CreateIn")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("IllnessId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("IllnessId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalNotes");
                });

            modelBuilder.Entity("ClinicManagement.DTOs.MedicalNoteDetailDTO", b =>
                {
                    b.Property<byte[]>("MedicineId")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("MedicalNoteId")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("MethodId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<uint>("Quantity")
                        .HasColumnType("int unsigned");

                    b.HasKey("MedicineId", "MedicalNoteId");

                    b.HasIndex("MedicalNoteId");

                    b.HasIndex("MethodId");

                    b.ToTable("MedicalNoteDetail");
                });

            modelBuilder.Entity("ClinicManagement.DTOs.MedicineDTO", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Price")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("Stock")
                        .HasColumnType("int unsigned");

                    b.Property<byte[]>("UnitId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("ClinicManagement.DTOs.MethodDTO", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Methods");
                });

            modelBuilder.Entity("ClinicManagement.DTOs.PatientDTO", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("ClinicManagement.DTOs.UnitDTO", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("ClinicManagement.DTOs.BillDTO", b =>
                {
                    b.HasOne("ClinicManagement.DTOs.MedicalNoteDTO", "MedicalNote")
                        .WithMany()
                        .HasForeignKey("MedicalNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalNote");
                });

            modelBuilder.Entity("ClinicManagement.DTOs.MedicalNoteDTO", b =>
                {
                    b.HasOne("ClinicManagement.DTOs.IllnessDTO", "Illness")
                        .WithMany()
                        .HasForeignKey("IllnessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicManagement.DTOs.PatientDTO", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Illness");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicManagement.DTOs.MedicalNoteDetailDTO", b =>
                {
                    b.HasOne("ClinicManagement.DTOs.MedicalNoteDTO", "MedicalNote")
                        .WithMany()
                        .HasForeignKey("MedicalNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicManagement.DTOs.MedicineDTO", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicManagement.DTOs.MethodDTO", "Method")
                        .WithMany()
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalNote");

                    b.Navigation("Medicine");

                    b.Navigation("Method");
                });

            modelBuilder.Entity("ClinicManagement.DTOs.MedicineDTO", b =>
                {
                    b.HasOne("ClinicManagement.DTOs.UnitDTO", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });
#pragma warning restore 612, 618
        }
    }
}
